def song():
  global _hidden_verificationVariable=0
  set_tcp(p[0.028210348281514253,-0.09610723587300697,-0.09969041498611403,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(0.260000, [0.050000, -0.008000, 0.024000], [0.000163, 0.000163, 0.000163, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  global Plane_1=p[0.32571614183608727,0.7933870146316717,0.11820742021636722,-2.208244884171713,-0.24738609815952348,-1.9195085473101943]
  global Plane_2=p[0.3436052139151623,0.7478032414335104,0.10077839665899768,2.768545736097797,0.1284831553507919,1.3672805628273381]
  global Plane_3=p[0.31945151854627996,0.6757990361168175,0.09459088830114093,2.7301760593116526,-0.049483824131046385,1.4252239353300047]
  global Plane_4=p[0.3372257363094211,0.6222230974198586,0.07001667903587716,2.621672423508307,-0.12240385890263918,1.4373011913128484]
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  popup("Started song()")
  global _event_flag = 0

  # global a_bow_poses = struct(
  #   tip_p=[.473129539189, .413197423330, .256308427905, -1.460522581833, -2.310115543652, 1.445803824327], 
  #   frog_p=[.300717266074, .793568239540, .099710283103, -1.543522183454, -2.354885618328, 1.346770272474]
  # )

  # global d_bow_poses = struct(
  #   tip_p=[.340413993945, .280157415162, .176342071758, -1.614553612482, -2.044810993523, 1.042279199535],
  #   frog_p=[.302785064368, .749849181019, .117254426008, -1.664082298752, -2.084265434693, 1.037965163360]
  # )

  # global g_bow_poses = struct(
  #   tip_p=[.162016291992, .201320984957, .059414774157, -1.929772636560, -1.931323067217, .555055912517], 
  #   frog_p=[.281203376642, .681662588607, .104672526365, -1.812194031755, -1.940153681829, .493747597283]
  # )

  # global c_bow_poses = struct(
  #   tip_p=[.079815569355, .285182178102, -.086654726588, -1.819646014269, -1.658258006768, .180930717120],
  #   frog_p=[.256662516098, .610082591416, .062624387196, -1.743236422252, -1.524514092756, .163823228357]
  # )
  global a_bow_poses = struct(
    tip_p =[0.260645157437812, 1.241217380288515, 0.12713323000299542, 1.567, 2.584, -1.404]
    frog_p =[0.30110873731073784, 0.7604864192113807, 0.12713323000299542, 1.64, 2.582, -1.575]
  )
  global d_bow_poses
  def ease_scale(note_dur):
    if note_dur > 3:
        note_dur = 3
    end

    return (1.0 - cos(3.14159265359 * note_dur / 3.0)) / 2.0
  end

  
  
  def bow(bow_dir, note_dur, bow_poses):
    if note_dur > 3:
      note_dur = 3
    end

    local dist_scale = ease_scale(note_dur)

    local tip_p=bow_poses.tip_p
    local frog_p=bow_poses.frog_p
    
    local tcp_pose = get_actual_tcp_pose()
    local start_p = [tcp_pose[0], tcp_pose[1], tcp_pose[2], tcp_pose[3], tcp_pose[4], tcp_pose[5]]
    local end_p = frog_p

    local direction_vector = (tip_p - frog_p) / norm(tip_p - frog_p)
    local t_dir = -1
    # r = r0 + vt positive t when true

    local target_dist = dist_scale * norm(tip_p - frog_p)

    if bow_dir:
      end_p = tip_p
      t_dir = 1
    end

    global ending_spot = end_p
    if (norm(end_p - start_p) >= target_dist):
      end_p = start_p + t_dir * direction_vector * target_dist
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur)
      sync()
    elif norm(end_p - start_p) - target_dist  >= -0.025:
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur)
      sync()
    else:
      local d1 = norm(end_p - start_p)
      local d2 = target_dist - norm(end_p - start_p)
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur * d1 / target_dist)
      sync()
      end_p = end_p + -1 * t_dir * direction_vector * d2
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur * d2 / target_dist)
      sync()
    end
  end

  def stay():
    stopj(2.5)
    sleep(0.025)
  end

  def a_bow(bow_dir, note_dur):
    _event_flag = 1  # START a_bow
    write_output_integer_register(0, _event_flag)
    write_output_integer_register(1, bow_dir)
    bow(bow_dir, note_dur, a_bow_poses)
    _event_flag = 2  # END a_bow
    write_output_integer_register(0, _event_flag)
  end

  def d_bow(bow_dir, note_dur):
    _event_flag = 3  # START d_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, d_bow_poses)
    _event_flag = 4  # END d_bow
    write_output_integer_register(0, _event_flag)
  end

  def g_bow(bow_dir, note_dur):
    _event_flag = 5  # START g_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, g_bow_poses)
    _event_flag = 6  # END g_bow
    write_output_integer_register(0, _event_flag)
  end

  def c_bow(bow_dir, note_dur):
    _event_flag = 7  # START c_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, c_bow_poses)
    _event_flag = 8  # END c_bow
    write_output_integer_register(0, _event_flag)
  end

  def round(n):
    local int_part = floor(n)
    if (n - int_part) >= 0.5:
        return int_part + 1
    else:
        return int_part
    end
  end

  def min(a, b):
    if a < b:
      return a
    else:
      return b
    end
  end

  def max(a, b):
    if a > b:
      return a
    else:
      return b
    end
  end

  def string_crossing(start_bow_poses, end_bow_poses, next_dir):
    # local a_to_d_frog=[ 0.03885732, -0.01042583, -0.03909307, -3.27378675, -4.54905543, 2.23515599]
    # local a_to_d_mid=[2.55715648e-03, -8.51565664e-02, -1.08389974e-01, -3.21889652e+00, -4.49939765e+00,  2.21639600e+00]
    # local a_to_d_tip=[-0.03416493, -0.12050286, -0.17569119, -3.16488982, -4.45964209, 2.20089496]

    local tcp_pose = get_actual_tcp_pose()
    local start_p = [tcp_pose[0], tcp_pose[1], tcp_pose[2], tcp_pose[3], tcp_pose[4], tcp_pose[5]]

    local bow_len = norm(end_bow_poses.tip_p - end_bow_poses.frog_p)
    local direction_vector = (end_bow_poses.tip_p - end_bow_poses.frog_p) / bow_len

    local dist_from_tip = norm(end_bow_poses.tip_p - end_bow_poses.frog_p) * norm(start_p - start_bow_poses.frog_p) / norm(start_bow_poses.tip_p - start_bow_poses.frog_p)

    local out = [0.89583677, 0.04158029, 0.44243367, 0, 0, 0]
    local step1 = start_p + out * 0.03
    # local step2 = end_bow_poses.frog_p + direction_vector *  dist_from_tip * 0.25 #+ out * 0.04
    local target_pose = end_bow_poses.frog_p + direction_vector *  dist_from_tip
    movep(p[step1[0], step1[1], step1[2], start_p[3], start_p[4], start_p[5]])
    movep(p[step1[0], step1[1], step1[2], d_bow_poses.frog_p[3], d_bow_poses.frog_p[4], d_bow_poses.frog_p[5]])
    sync()
    # movej(p[step2[0], step2[1], step2[2], step2[3], step2[4], step2[5]])
    # sync()
    movep(p[target_pose[0], target_pose[1], target_pose[2], target_pose[3], target_pose[4], target_pose[5]])
    # sync()

  end

  def a_to_d(next_dir=0):
    _event_flag = 101
    write_output_integer_register(0, _event_flag)
    string_crossing(a_bow_poses, d_bow_poses, next_dir)
    _event_flag = 102
    write_output_integer_register(0, _event_flag)
  end

  def a_to_g(next_dir=0):
    _event_flag = 109
    write_output_integer_register(0, _event_flag)
    string_crossing(a_bow_poses, g_bow_poses, next_dir)
    _event_flag = 110
    write_output_integer_register(0, _event_flag)
  end

  def d_to_a(next_dir=0):
    _event_flag = 103
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, a_bow_poses, next_dir)
    _event_flag = 104
    write_output_integer_register(0, _event_flag)
  end

  def d_to_g(next_dir=0):
    _event_flag = 105
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, g_bow_poses, next_dir)
    _event_flag = 106
    write_output_integer_register(0, _event_flag)
  end

  def d_to_c(next_dir=0):
    _event_flag = 113
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, c_bow_poses, next_dir)
    _event_flag = 114
    write_output_integer_register(0, _event_flag)
  end

  def g_to_a(next_dir=0):
    _event_flag = 111
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, a_bow_poses, next_dir)
    _event_flag = 112
    write_output_integer_register(0, _event_flag)
  end

  def g_to_d(next_dir=0):
    _event_flag = 107
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, d_bow_poses, next_dir)
    _event_flag = 108
    write_output_integer_register(0, _event_flag)
  end

  def g_to_c(next_dir=0):
    _event_flag = 117
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, c_bow_poses, next_dir)
    _event_flag = 118
    write_output_integer_register(0, _event_flag)
  end

  def c_to_d(next_dir=0):
    _event_flag = 115
    write_output_integer_register(0, _event_flag)
    string_crossing(c_bow_poses, d_bow_poses, next_dir)
    _event_flag = 116
    write_output_integer_register(0, _event_flag)
  end

  def c_to_g(next_dir=0):
    _event_flag = 119
    write_output_integer_register(0, _event_flag)
    string_crossing(c_bow_poses, g_bow_poses, next_dir)
    _event_flag = 120
    write_output_integer_register(0, _event_flag)
  end

  # $$$ CODE HERE $$$
  
end

song()