def song():
  global _hidden_verificationVariable=0
  set_tcp(p[0.028210348281514253,-0.09610723587300697,-0.09969041498611403,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(0.260000, [0.050000, -0.008000, 0.024000], [0.000163, 0.000163, 0.000163, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  global Plane_1=p[0.32571614183608727,0.7933870146316717,0.11820742021636722,-2.208244884171713,-0.24738609815952348,-1.9195085473101943]
  global Plane_2=p[0.3436052139151623,0.7478032414335104,0.10077839665899768,2.768545736097797,0.1284831553507919,1.3672805628273381]
  global Plane_3=p[0.31945151854627996,0.6757990361168175,0.09459088830114093,2.7301760593116526,-0.049483824131046385,1.4252239353300047]
  global Plane_4=p[0.3372257363094211,0.6222230974198586,0.07001667903587716,2.621672423508307,-0.12240385890263918,1.4373011913128484]
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  popup("Started song()")
  global _event_flag = 0

  global a_bow_poses = struct(
    frog_p=[0.9096045418660197, -0.2588044569343866, 0.541003, -0.06060243967666461, 2.9929390935818714, -0.913310449637719],
    tip_p=[0.6598094581339804, -0.2689245430656134, 0.541003, -0.06060243967666461, 2.9929390935818714, -0.913310449637719]
  )
  global d_bow_poses = struct(
    frog_p=[0.8946223326266852, -0.2685354188867812, 0.541219, -0.013636038441305823, 2.9992924465998407, -0.9256471157813614],
    tip_p=[0.6446326673733146, -0.27080858111321887, 0.541219, -0.013636038441305823, 2.9992924465998407, -0.9256471157813614]
  )
  global g_bow_poses = struct(
    frog_p=[0.6293845311772893, -0.2678204300780099, 0.5421385, 2.5411257601855066, -0.016096847168606893, -0.004983072771393007],
    tip_p=[0.8793644688227106, -0.2709875699219901, 0.5421385, 2.5411257601855066, -0.016096847168606893, -0.004983072771393007]
  )
  global c_bow_poses = struct(
    frog_p=[0.6139039926517809, -0.26083734280774956, 0.541003, 2.553178541679736, -0.033484640772030456, -0.010142425714514788],
    tip_p=[0.8638180073482191, -0.26739365719225044, 0.541003, 2.553178541679736, -0.033484640772030456, -0.010142425714514788]
  )

  global a_orient = [-0.06060243967666461, 2.9929390935818714, -0.913310449637719]
  global d_orient = [-0.013636038441305823, 2.9992924465998407, -0.9256471157813614]
  global g_orient = [2.5411257601855066, -0.016096847168606893, -0.004983072771393007]
  global c_orient = [2.553178541679736, -0.033484640772030456, -0.010142425714514788]


  def ease_scale(note_dur):
    if note_dur > 3:
        note_dur = 3
    end

    return (1.0 - cos(3.14159265359 * note_dur / 3.0)) / 2.0
  end

  
  
  def bow(bow_dir, note_dur, bow_poses, orient):
    if note_dur > 3:
      note_dur = 3
    end

    local dist_scale = ease_scale(note_dur)

    local tip_p=bow_poses.tip_p
    local frog_p=bow_poses.frog_p
    
    local tcp_pose = get_actual_tcp_pose()
    local start_p = [tcp_pose[0], tcp_pose[1], tcp_pose[2], orient[0], orient[1], orient[2]]
    local end_p = frog_p

    local direction_vector = (tip_p - frog_p) / norm(tip_p - frog_p)
    local t_dir = -1
    # r = r0 + vt positive t when true

    local target_dist = dist_scale * norm(tip_p - frog_p)

    if bow_dir:
      end_p = tip_p
      t_dir = 1
    end

    global ending_spot = end_p
    if (norm(end_p - start_p) >= target_dist):
      end_p = start_p + t_dir * direction_vector * target_dist
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur)
      sync()
    elif norm(end_p - start_p) - target_dist  >= -0.025:
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur)
      sync()
    else:
      local d1 = norm(end_p - start_p)
      local d2 = target_dist - norm(end_p - start_p)
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur * d1 / target_dist)
      sync()
      end_p = end_p + -1 * t_dir * direction_vector * d2
      # movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]])
      movel(p[end_p[0], end_p[1], end_p[2], end_p[3], end_p[4], end_p[5]], t=note_dur * d2 / target_dist)
      sync()
    end
  end

  def stay():
    stopj(2.5)
    sleep(0.025)
  end

  def a_bow(bow_dir, note_dur):
    _event_flag = 1  # START a_bow
    write_output_integer_register(0, _event_flag)
    write_output_integer_register(1, bow_dir)
    bow(bow_dir, note_dur, a_bow_poses, a_orient)
    _event_flag = 2  # END a_bow
    write_output_integer_register(0, _event_flag)
  end

  def d_bow(bow_dir, note_dur):
    _event_flag = 3  # START d_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, d_bow_poses, d_orient)
    _event_flag = 4  # END d_bow
    write_output_integer_register(0, _event_flag)
  end

  def g_bow(bow_dir, note_dur):
    _event_flag = 5  # START g_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, g_bow_poses, g_orient)
    _event_flag = 6  # END g_bow
    write_output_integer_register(0, _event_flag)
  end

  def c_bow(bow_dir, note_dur):
    _event_flag = 7  # START c_bow
    write_output_integer_register(1, bow_dir)
    write_output_integer_register(0, _event_flag)
    bow(bow_dir, note_dur, c_bow_poses, c_orient)
    _event_flag = 8  # END c_bow
    write_output_integer_register(0, _event_flag)
  end

  def round(n):
    local int_part = floor(n)
    if (n - int_part) >= 0.5:
        return int_part + 1
    else:
        return int_part
    end
  end

  def min(a, b):
    if a < b:
      return a
    else:
      return b
    end
  end

  def max(a, b):
    if a > b:
      return a
    else:
      return b
    end
  end

  def string_crossing(start_bow_poses, end_bow_poses, start_orient, end_orient, next_dir):
    local tcp_pose = get_actual_tcp_pose()
    local start_p = [tcp_pose[0], tcp_pose[1], tcp_pose[2], tcp_pose[3], tcp_pose[4], tcp_pose[5]]

    local acc = 0.2
    local speed = 0.2

    # Compute bow vector on start and end strings
    local start_vec = start_bow_poses.tip_p - start_bow_poses.frog_p
    local end_vec = end_bow_poses.tip_p - end_bow_poses.frog_p

    local start_len = norm(start_vec)
    local end_len = norm(end_vec)

    # Normalize to unit vectors
    local start_dir = start_vec / start_len
    local end_dir = end_vec / end_len

    # Project current TCP onto start bow trajectory
    local rel_to_frog = start_p - start_bow_poses.frog_p
    local t_start = dot(rel_to_frog, start_dir)
    local t_start_clamped = min(max(t_start, 0.0), start_len)  # Clamp within bow

    # Compute exact point on start and end bow paths
    local projected_start = start_bow_poses.frog_p + t_start_clamped * start_dir
    local projected_end = end_bow_poses.frog_p + t_start_clamped * end_dir

    # Use TCP orientation from current pose for start and end points
    local step1 = [projected_start[0], projected_start[1], projected_start[2],
               start_orient[0], start_orient[1], start_orient[2]]

    local step2 = [projected_end[0], projected_end[1], projected_end[2],
               end_orient[0], end_orient[1], end_orient[2]]

    # Optional: short linear move to align onto bow plane
    movep(p[step1[0], step1[1], step1[2], step1[3], step1[4], step1[5]], a=acc, v=speed)
    sync()

    # "Roll" across to the same relative point on next string
    movep(p[step2[0], step2[1], step2[2], step2[3], step2[4], step2[5]], a=acc, v=speed)
    sync()
  end

  def a_to_d(next_dir=0):
    _event_flag = 101
    write_output_integer_register(0, _event_flag)
    string_crossing(a_bow_poses, d_bow_poses, a_orient, d_orient, next_dir)
    _event_flag = 102
    write_output_integer_register(0, _event_flag)
  end

  def a_to_g(next_dir=0):
    _event_flag = 109
    write_output_integer_register(0, _event_flag)
    string_crossing(a_bow_poses, g_bow_poses, a_orient, g_orient, next_dir)
    _event_flag = 110
    write_output_integer_register(0, _event_flag)
  end

  def d_to_a(next_dir=0):
    _event_flag = 103
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, a_bow_poses, d_orient, a_orient, next_dir)
    _event_flag = 104
    write_output_integer_register(0, _event_flag)
  end

  def d_to_g(next_dir=0):
    _event_flag = 105
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, g_bow_poses, d_orient, g_orient, next_dir)
    _event_flag = 106
    write_output_integer_register(0, _event_flag)
  end

  def d_to_c(next_dir=0):
    _event_flag = 113
    write_output_integer_register(0, _event_flag)
    string_crossing(d_bow_poses, c_bow_poses, d_orient, c_orient, next_dir)
    _event_flag = 114
    write_output_integer_register(0, _event_flag)
  end

  def g_to_a(next_dir=0):
    _event_flag = 111
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, a_bow_poses, g_orient, a_orient, next_dir)
    _event_flag = 112
    write_output_integer_register(0, _event_flag)
  end

  def g_to_d(next_dir=0):
    _event_flag = 107
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, d_bow_poses, g_orient, d_orient, next_dir)
    _event_flag = 108
    write_output_integer_register(0, _event_flag)
  end

  def g_to_c(next_dir=0):
    _event_flag = 117
    write_output_integer_register(0, _event_flag)
    string_crossing(g_bow_poses, c_bow_poses, g_orient, c_orient, next_dir)
    _event_flag = 118
    write_output_integer_register(0, _event_flag)
  end

  def c_to_d(next_dir=0):
    _event_flag = 115
    write_output_integer_register(0, _event_flag)
    string_crossing(c_bow_poses, d_bow_poses, c_orient, d_orient, next_dir)
    _event_flag = 116
    write_output_integer_register(0, _event_flag)
  end

  def c_to_g(next_dir=0):
    _event_flag = 119
    write_output_integer_register(0, _event_flag)
    string_crossing(c_bow_poses, g_bow_poses, c_orient, g_orient, next_dir)
    _event_flag = 120
    write_output_integer_register(0, _event_flag)
  end

  # $$$ CODE HERE $$$
  
end

song()
